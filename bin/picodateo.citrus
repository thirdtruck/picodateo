grammar PicoDateo
  rule game
    (scene*) {
      Game.new(matches.map { |m| [m.value.name, m.value] }.to_h)
    }
  end

  rule commands
    (speech | speech newline | if_cond)+
  end

  rule scene
    (scene_prompt space scene_name:(chars) space newline commands) {
      scene_name = capture(:scene_name).value.to_sym
      c = capture(:commands).matches.map { |m| m.value }
      Scene.new(scene_name, c)
    }
  end

  rule actor_prompt
    ('[' actor_name:(chars*) ']') {
      capture(:actor_name).value
    }
  end

  rule speech_text
    [^\n]*
  end

  rule speech
    (space actor_prompt space speech_text space newline) {
      Speech.new(capture(:actor_prompt).value.to_sym, capture(:speech_text).value.strip)
    }
  end

  rule if_cond
    (space 'if(x)' space newline commands space 'endif' space newline) {
      IfCond.new('wip', capture(:commands).matches.map { |m| m.value })
    }
  end

  rule scene_prompt
    'scene:'
  end

  rule scene_name
    chars
  end
    
  rule chars
    [a-zA-Z_]+
  end

  rule space
    [ \t]*
  end

  rule newline
    [\n\r]+
  end
end
